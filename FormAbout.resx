<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4QCqRXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAZKG
        AAcAAAB0AAAALAAAAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBnACAAdgAxAC4AMAAgACgA
        dQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA2ADIAKQAsACAAcQB1AGEAbABpAHQAeQAgAD0A
        IAA4ADAACgAAAAAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxobIxwW
        FiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgoKCgoKCgo
        KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgAcQCWAwEiAAIRAQMRAf/EAB8AAAEFAQEB
        AQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQci
        cRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVm
        Z2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV
        1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//E
        ALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDTh
        JfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKT
        lJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5
        +v/aAAwDAQACEQMRAD8A+qaKKKACiiigAopKWgAoopKAFopKWgAopKKAFooooAKKSigBaKKKACiiigAp
        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
        UUUAFFFFAH//2Q==
</value>
  </data>
</root>